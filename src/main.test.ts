// Generated by CodiumAI

import { EpubSettings } from "../types";
import EpubFile from "./main";

describe("EpubFile", () => {
  // Tests that an error is thrown when the EPUB file has no chapters
  it("should throw an error when EPUB file has no chapters", async () => {
    const epubSettings: EpubSettings = {
      title: "Test Book",
      chapters: [],
    };
    const epubFile = new EpubFile(epubSettings);
    await expect(epubFile.constructEpub()).rejects.toThrow(
      "Epub file needs at least one chapter"
    );
  });

  // Tests that an error is thrown when the EPUB file has no title
  it("should throw an error when the EPUB file has no title", async () => {
    const epubSettings: EpubSettings = {
      title: "",
      chapters: [
        {
          fileName: "chapter1.xhtml",
          title: "Chapter 1",
          htmlBody: "<p>Chapter 1 content</p>",
        },
      ],
    };
    const epubFile = new EpubFile(epubSettings);
    await expect(epubFile.constructEpub()).rejects.toThrow(
      "Epub file needs a title"
    );
  });

  // Tests that an EPUB file with no author is handled correctly
  it("should throw an error when no author is provided", async () => {
    const epubSettings: EpubSettings = {
      title: "Test Book",
      chapters: [
        {
          title: "Chapter 1",
          htmlBody: "<p>Chapter 1</p>",
        },
      ],
    };
    const epubFile = new EpubFile(epubSettings);
    const files = await epubFile.constructEpub();
    expect(files[4].content).toContain("<dc:creator>Unnamed</dc:creator>");
  });
});

describe("EpubFile Path names", () => {
  // Tests if chapter with correct filename is created
  it("should construct file with 'EPUB/content/BackInthefuture.xhtml' as path", async () => {
    const epubFile = new EpubFile({
      title: "Test Book",
      chapters: [
        {
          title: "Chapter 1",
          htmlBody: "<p></p>",
          fileName: "BackInthefuture",
        },
      ],
    });
    const files = await epubFile.constructEpub();
    expect(files[3].path).toBe("EPUB/content/BackInthefuture.xhtml");
  });

  // Tests if chapters with correct filenames are created, if there are multiple with the same filename
  it("should construct file with 'EPUB/content/BackInthefuture1.xhtml' as path", async () => {
    const epubFile = new EpubFile({
      title: "Test Book",
      chapters: [
        {
          title: "Chapter 1",
          htmlBody: "<p></p>",
          fileName: "BackInthefuture",
        },
        {
          title: "Chapter 2",
          htmlBody: "<p></p>",
          fileName: "BackInthefuture",
        },
      ],
    });
    const files = await epubFile.constructEpub();
    expect(files[3].path).toBe("EPUB/content/BackInthefuture.xhtml");
    expect(files[4].path).toBe("EPUB/content/BackInthefuture1.xhtml");
  });

  // Tests that an EPUB file with multiple images in a chapter is constructed correctly
  it("should construct EPUB file with multiple images in a chapter", async () => {
    const epubSettings: EpubSettings = {
      title: "Test Book",
      chapters: [
        {
          title: "Chapter 1",
          htmlBody: '<img src="image1.jpg">',
        },
      ],
    };
    const epubFile = new EpubFile(epubSettings);
    const files = await epubFile.constructEpub();
    expect(files[3].path).toBe("EPUB/images/Chapter_1_image_1.jpg");
  });

  // Tests that an EPUB file with multiple images in a chapter is constructed correctly
  it("should construct EPUB file with multiple images in a chapter", async () => {
    const epubSettings: EpubSettings = {
      title: "Test Book",
      chapters: [
        {
          title: "Chapter 1",
          htmlBody: '<img src="image1.jpg"><img src="image2.png">',
        },
      ],
      cover: "cover.jpg",
    };
    const epubFile = new EpubFile(epubSettings);
    const files = await epubFile.constructEpub();
    expect(files[4].path).toBe("EPUB/images/Chapter_1_image_1.jpg");
    expect(files[5].path).toBe("EPUB/images/Chapter_1_image_2.png");
  });

  // Tests that all default EPUB filenames and paths are set correctly
  it("should construct EPUB file with correct filenames and paths", async () => {
    const epubSettings: EpubSettings = {
      title: "Test Book",
      chapters: [
        {
          title: "Chapter 1",
          htmlBody: "",
        },
      ],
    };
    const epubFile = new EpubFile(epubSettings);
    const files = await epubFile.constructEpub();
    expect(files.length).toBe(8);
    expect(files[0].path).toBe("META-INF/container.xml");
    expect(files[1].path).toBe("EPUB/styles.css");
    expect(files[2].path).toBe("EPUB/script.js");
    expect(files[3].path).toBe("EPUB/content/Chapter_1.xhtml");
    expect(files[4].path).toBe("EPUB/Test_Book.opf");
    expect(files[5].path).toBe("EPUB/toc.xhtml");
    expect(files[6].path).toBe("EPUB/toc.ncx");
    expect(files[7].path).toBe("mimetype");
  });
});

describe("EpubFile contents", () => {
  // Tests that the constructEpub method sets a book ID if none is provided in the EpubSettings object
  it("should set a book ID if none is provided", async () => {
    const epubSettings: EpubSettings = {
      title: "Test Book",
      chapters: [
        {
          title: "Chapter 1",
          htmlBody: "<p>Chapter 1</p>",
        },
      ],
    };
    const epubFile = new EpubFile(epubSettings);
    const files = await epubFile.constructEpub();
    const opfFile = files.find((file) => file.path.endsWith(".opf"));
    const opfContent = opfFile?.content;
    expect(opfContent).toMatch(/.*id=\"BookId\">\d+<.*/);
  });

  // Tests that the EPUB file is constructed correctly when the js parameter is empty
  it("should construct EPUB file with empty js", async () => {
    const epubSettings: EpubSettings = {
      title: "Test Book",
      chapters: [
        {
          title: "Chapter 1",
          htmlBody: "<h1>Chapter 1</h1>",
        },
      ],
      js: "",
    };
    const epubFile = new EpubFile(epubSettings);
    const files = await epubFile.constructEpub();
    expect(files.length).toBe(8);
    expect(files[2].content).toBe("function fnEpub(){}");
    expect(files[2].path).toBe("EPUB/script.js");
  });

  // Tests that the EPUB file is constructed correctly when the css parameter is empty
  it("should construct EPUB file with default css", async () => {
    const epubSettings: EpubSettings = {
      title: "Test Book",
      chapters: [
        {
          title: "Chapter 1",
          htmlBody: "<h1>Chapter 1</h1>",
        },
      ],
    };
    const epubFile = new EpubFile(epubSettings);
    const files = await epubFile.constructEpub();

    expect(files.length).toBe(8);
    expect(files[1].content).toBe(
      "body {\n" +
        ' font-family: "Helvetica Neue", "Helvetica", "Arial", sans-serif;\n' +
        " font-size: 1.125em;\n" +
        " line-height: 1.6em;\n" +
        " color: #000;\n" +
        "}\n" +
        "h1, h2, h3, h4, h5, h6 {\n" +
        " line-height: 1em;\n" +
        "}\n" +
        "h1 {\n" +
        " font-size: 3em;\n" +
        "}\n" +
        "h2 {\n" +
        " font-size: 2.5em;\n" +
        "}\n"
    );
    expect(files[1].path).toBe("EPUB/styles.css");
  });

  // Tests that the EPUB file is constructed correctly when own css parameter is provided as string
  it("should construct EPUB file with own css as string", async () => {
    const epubSettings: EpubSettings = {
      title: "Test Book",
      chapters: [
        {
          title: "Chapter 1",
          htmlBody: "<h1>Chapter 1</h1>",
        },
      ],
      stylesheet: "body {\n" + " background-color: black;\n" + "}\n",
    };
    const epubFile = new EpubFile(epubSettings);
    const files = await epubFile.constructEpub();

    expect(files.length).toBe(8);
    expect(files[1].content).toBe(
      "body {\n" + " background-color: black;\n" + "}\n"
    );
    expect(files[1].path).toBe("EPUB/styles.css");
  });
  // Tests that the EPUB file is constructed correctly when own css parameter is provided as object
  it("should construct EPUB file with own css as object", async () => {
    const epubSettings: EpubSettings = {
      title: "Test Book",
      chapters: [
        {
          title: "Chapter 1",
          htmlBody: "<h1>Chapter 1</h1>",
        },
      ],
      stylesheet: { body: { "background-color": "black" } },
    };
    const epubFile = new EpubFile(epubSettings);
    const files = await epubFile.constructEpub();

    expect(files.length).toBe(8);
    expect(files[1].content).toBe(
      "body {\n" + " background-color: black;\n" + "}\n"
    );
    expect(files[1].path).toBe("EPUB/styles.css");
  });
});

